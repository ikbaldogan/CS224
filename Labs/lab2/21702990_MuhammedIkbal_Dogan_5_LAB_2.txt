#CS224
#Lab No. 2
#Section No. 5
#Muhammed Ikbal Dogan
#21702990	

#PART3
	.text
	.globl __start
__start:

	add $s1,$0,$0 #s1 is the array size and it's 0 at the beginning of the program
	
# $s0 is choice for the options in the menu
# $s1 is the array size
# $s2 is the beginning adress of the array
interface:
	la $a0,welcome
	li $v0,4
	syscall
	
	li $v0,5
	syscall
	move $s0,$v0
		
	move $a0, $s2 #array adress passing
	move $a1, $s1 #array size passing
	beq $s0,4,finish	

	bne $s0,0,pass0
	jal getArray
	move $s2,$v0
	move $s1,$v1
pass0:
	bne $s0,1,pass1
	jal PrintArray
pass1:
	bne $s0,2,pass2
	jal CheckSymmetric
pass2:
	bne $s0,3,pass3
	jal FindMinMax
pass3:
	li $v0,4
	la $a0, enter
	syscall
	j interface
	
finish:

	li $v0, 10 #bye
	syscall 

#$s0 is the array size
#$s1 is the arraysize*4
#$s2 is the beginning adress of the array
#s3 is the counter for getting array elements
#$s4 is for iterating array adress in the loop
getArray:
	addi $sp,$sp,-24
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	sw $ra, 20($sp)
	
	la $a0,getSize
	li $v0,4
	syscall

	li $v0,5
	syscall
	
	move $s0,$v0 
	mul $s1,$s0,4 
	
	move $a0, $s1 
	li $v0, 9 
	syscall
	
	add $s2, $zero, $v0 
	
	add $s3, $0,$0 
	add $s4,$0,$s2 
getElements:
	beq $s3,$s0,elementsdone
	
	la $a0,getElement
	li $v0,4
	syscall
	
	li $v0,5
	syscall
	
	sw $v0,0($s4)
	
	addi $s4,$s4,4
	addi $s3,$s3,1
	j getElements
	
elementsdone:
	move $a0,$s2
	move $a1, $s0
	jal PrintArray
	
	move $v0, $s2 #v0 is array base adress
	move $v1, $s0 #v1 is array size
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	lw $s2, 8($sp)
	lw $s3, 12($sp)
	lw $s4, 16($sp)
	lw $ra, 20($sp)
	addi $sp,$sp,24

	jr $ra
	

	#$s0 is array adress
 	#$s1 is array size
	#$s2 is index value
	#$s3 is min value
 	#$s4 is max value
FindMinMax:
	addi $sp,$sp -24
	sw $s0, 0($sp) 
	sw $s1, 4($sp)
	sw $s2, 8($sp) 
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	sw $ra, 20($sp)
	
	move $s0, $a0
	move $s1, $a1
	ble  $s1,$0,empty # IF the array has zero element, average should be 0. For max and min, zero is also best value I think.
	lw $s3, 0($s0)#both min and max is set to first element at the beginning
	lw $s4, 0($s0)#both min and max is set to first element at the beginning
theLoop:
	beq $s1,$0,end
	lw $s2, 0($s0)
	bgt $s2,$s3,minpassed
	move $s3,$s2
minpassed:	
	blt $s2,$s4,maxpassed
	move $s4,$s2
maxpassed:
	addi $s1,$s1,-1
	addi $s0,$s0,4
	j theLoop

empty:
	la $a0, emptyMsg2
	li $v0,4
	syscall
	li $v0,0
	li $v1,0
	j end2
end:
	la $a0,minV
	li $v0,4
	syscall
	
	move $a0,$s3
	li $v0,1
	syscall
	
	li $v0,4
	la $a0, enter
	syscall
	
	la $a0,maxV
	li $v0,4
	syscall
	
	
	move $a0,$s4
	li $v0,1
	syscall
	
	li $v0,4
	la $a0, enter
	syscall
	move $v0,$s3
	move $v1,$s4
	
end2:
	lw $s0, 0($sp) 
	lw $s1, 4($sp)
	lw $s2, 8($sp) 
	lw $s3, 12($sp)
	lw $s4, 16($sp)
	lw $ra, 20($sp)
	addi $sp,$sp 24
	jr $ra
	
# $s0 holds for item at first index
# $s1 holds for the item at last index
# $s3 holds for first index adress
# $s4 holds for last index adress
# $s5 is the size/2 for counting
# $s6 holds for the array size
CheckSymmetric:
	addi $sp, $sp,-28
	sw $s0, 0($sp)
	sw $s1, 4($sp) 
	sw $s3, 8($sp)
	sw $s4, 12($sp)
	sw $s5, 16($sp)
	sw $s6, 20($sp)
	sw $ra, 24($sp)
	move $s6,$a1
	move $s3,$a0
	move $s4,$a0
	div $s5,$s6,2 # size/2
	mul $s6,$s6,4#calculation for last index
	addi $s6,$s6,-4 #calculation for last index
	add $s4,$s4,$s6 # $s1 holds for the last index now
loopA:
	ble $s5,0,symmetric
	lw $s0, 0($s3)
	lw $s1, 0($s4)
	bne $s0,$s1,notSymmetric
	addi $s5,$s5,-1
	addi $s3,$s3,4
	addi $s4,$s4,-4
	j loopA
symmetric:
	la $a0, final1
	li $v0,4
	syscall
	li $v0,1
	j doneA

notSymmetric:
	la $a0, final2
	li $v0,4
	syscall
	li $v0,0
	j doneA
	
doneA:	
	li $v0,4
	la $a0, enter
	syscall
	
	lw $s0, 0($sp)
	lw $s1, 4($sp) 
	lw $s3, 8($sp)
	lw $s4, 12($sp)
	lw $s5, 16($sp) 
	lw $s6, 20($sp)
	lw $ra, 24($sp)
	addi $sp, $sp,28
	jr $ra




#s0 holds for array adress
#s1 holds for arraysize also counter
PrintArray:
	addi $sp, $sp, -12
	sw $s0, 0($sp) 
	sw $s1, 4($sp)
	sw $ra, 8($sp)
	move $s0, $a0 
	move $s1, $a1 
	ble $s1, $0, zeroElement # if the array is empty go to zeroElement label and print that array is empty
	
loop:
	beq $s1, $0, done #when counter equals to zero go to done
	
	lw $a0, 0($s0) #print the element at index i
	li $v0,1
	syscall
	
	li $v0,4
	la $a0, space
	syscall
	
	addi $s0,$s0,4 # go to next element
	addi $s1,$s1,-1 #decrease the counter
	j loop			

zeroElement:
	li $v0,4
	la $a0,emptyMsg
	syscall
done:	
	li $v0,4
	la $a0, enter
	syscall
	
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	lw $ra, 8($sp)
	addi $sp, $sp, 12
	jr $ra
	.data

final1: .asciiz "The array is symmetric"
final2: .asciiz "The array is not symmetric"
space: .asciiz " "
enter: .asciiz "\n"
emptyMsg: .asciiz "The array is empty"
emptyMsg2: .asciiz "The array is empty therefore it has no max and min values"
maxV: .asciiz"Max value is:"
minV: .asciiz "Min value is:"
welcome: .asciiz"0)Get Array\n1)Print Array\n2)CheckSymmetry\n3)FindMinMax\n4)Exit\nEnter:"
getSize: .asciiz"Enter the array size:"
getElement: .asciiz"Enter the element: "



#PART4

	.text
	.globl start
start:

	la $a0,first
	li $v0,4
	syscall
	
	li $v0,5
	syscall
	move $s0,$v0
	
	la $a0,first2
	li $v0,4
	syscall
	
	li $v0,5
	syscall
	move $s1,$v0
	
	la $a0,first3
	li $v0,4
	syscall
	
	li $v0,5
	syscall
	move $s2,$v0
	
	move $a0,$s0
	move $a1,$s1
	move $a2,$s2
	jal countBitPattern
	move $s1,$v0
	
	la $a0,enter
	li $v0,4
	syscall
	
	la $a0,result2
	li $v0,4
	syscall
	
	li $v0,1
	move $a0,$s1
	syscall
	
	li $v0, 10 #bye
	syscall 
	
#$s0 is search key
#$s1 is target to search
# $s2 is 32 for dividing and copy target
#$s3 is the mask
#$s4 is counter for mask and check loop
#$s5 is occurance oount
#$s6 is the 32/a2 
#$s7 is counter for srl
countBitPattern:
	addi $sp,$sp,-36
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	sw $s5, 20($sp)
	sw $s6, 24($sp)
	sw $s7, 28($sp)
	sw $ra, 32($sp)
	move $s0,$a0 
	move $s1,$a1 
	addi $s2,$0,32 
	
	add $s3,$0,$0 
	add $s4,$0,$0
maskLoop:
	beq $s4,$a2,maskDone
	sll $s3,$s3,1
	addi $s3,$s3,1
	addi $s4,$s4,1
	j maskLoop
maskDone:
	and $s0,$s0,$s3 # $s0 is the search key now
	div $s6, $s2,$a2 

	add $s4,$0,$0 #$s4 is counter for mask and check loop
	add $s5,$0,$0 

countLoop:
	beq  $s4,$s6,countDone
	add $s7,$0,$0 
	move $s2,$s1 # $s2 is copy target
	and $s2,$s2,$s3 #s2 is ready for checking now
	bne $s2,$s0,pass
	addi $s5,$s5,1	
pass:
	beq $s7,$a2,pass2
	srl $s1,$s1,1
	addi $s7,$s7,1
	j pass
pass2:
	addi $s4,$s4,1
	j countLoop
countDone:
	la $a0,result
	li $v0,4
	syscall
	
	li $v0,1
	move $a0,$s5
	syscall
	
	move $v0,$s5 #return occurences
	
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	lw $s2, 8($sp)
	lw $s3, 12($sp)
	lw $s4, 16($sp)
	lw $s5, 20($sp)
	lw $s6, 24($sp)
	lw $s7, 28($sp)
	lw $ra, 32($sp)
	addi $sp,$sp,36
	
	jr $ra
.data
result: .asciiz"Number of occurrences:"
result2: .asciiz"Returned Number of occurrences:"
enter: .asciiz"\n"
first: .asciiz"Enter the a0:"
first2: .asciiz"Enter the a1:"
first3: .asciiz"Enter the a2:"